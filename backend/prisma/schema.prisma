generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model cart {
  product_id String
  user_id    String  @unique
  amount     Int
  product    product @relation(fields: [product_id], references: [id])
  user       user    @relation(fields: [user_id], references: [id])

  @@unique([product_id, user_id])
}

model product {
  id          String         @id
  name        String
  description String?        @db.VarChar(148)
  avg_rating  Float          @default(0)
  images      String[]
  dress_style DressStyleType
  type        ProductType
  sizes       SizesType[]
  colors      ColorsType[]
  price       Int
  discount    Int?
  amount      Int
  cart        cart[]
  review      review[]
}

model review {
  id                      String   @id
  product_id              String
  user_id                 String
  client_first_name       String
  client_last_name_letter String   @db.VarChar(2)
  feedback                String   @db.VarChar(232)
  rating                  Float
  is_verified             Boolean  @default(false)
  posted_on               DateTime @default(now())
  product                 product  @relation(fields: [product_id], references: [id])
  user                    user     @relation(fields: [user_id], references: [id])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user {
  id             String     @id
  name           String?
  email          String?    @unique
  email_verified DateTime?
  image          String?
  role           Role       @default(USER)
  account        account[]
  cart           cart?
  review         review[]
  sessions       sessions[]
}

model verification_token {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum ColorsType {
  beige
  black
  blue
  brown
  cyan
  grey
  green
  orange
  purple
  red
  white
  yellow
}

enum DressStyleType {
  casual
  formal
  party
  gym
}

enum ProductType {
  tShirt
  short
  shirt
  hoodie
  jeans
}

enum Role {
  USER
  ADMIN
}

enum SizesType {
  xxSmall
  xSmall
  small
  medium
  large
  xLarge
  xxLarge
  xxxLarge
  xxxxLarge
}
